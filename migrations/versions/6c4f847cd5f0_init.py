"""init

Revision ID: 6c4f847cd5f0
Revises: 
Create Date: 2025-05-12 20:07:53.266224

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6c4f847cd5f0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('images', sa.VARCHAR(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('color',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('images', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('special_offer',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('code', sa.VARCHAR(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('discount', sa.INTEGER(), nullable=False),
    sa.Column('condition', sa.INTEGER(), nullable=True),
    sa.Column('type', sa.VARCHAR(), nullable=False),
    sa.Column('total_quantity', sa.INTEGER(), nullable=False),
    sa.Column('used_quantity', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.VARCHAR(), nullable=False),
    sa.Column('last_name', sa.VARCHAR(), nullable=False),
    sa.Column('email', sa.VARCHAR(), nullable=False),
    sa.Column('password', sa.VARCHAR(), nullable=False),
    sa.Column('phone', sa.VARCHAR(), nullable=True),
    sa.Column('customer_status', sa.VARCHAR(), server_default='active', nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), nullable=False),
    sa.Column('is_admin', sa.BOOLEAN(), server_default=sa.text('false'), nullable=False),
    sa.Column('is_customer', sa.BOOLEAN(), server_default=sa.text('false'), nullable=False),
    sa.Column('two_fa_secret', sa.VARCHAR(), nullable=True),
    sa.Column('two_fa_enabled', sa.BOOLEAN(), server_default=sa.text('false'), nullable=False),
    sa.Column('otp', sa.VARCHAR(), nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('address',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('line', sa.VARCHAR(), nullable=False),
    sa.Column('street', sa.VARCHAR(), nullable=False),
    sa.Column('ward', sa.VARCHAR(), nullable=False),
    sa.Column('city', sa.VARCHAR(), nullable=False),
    sa.Column('district', sa.VARCHAR(), nullable=False),
    sa.Column('country', sa.VARCHAR(), server_default='Viá»‡t Nam', nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('categories_product',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('categories_id', sa.Uuid(), nullable=False),
    sa.Column('product_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['categories_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('code', sa.VARCHAR(), nullable=False),
    sa.Column('sub_total', sa.INTEGER(), nullable=False),
    sa.Column('total_price', sa.INTEGER(), nullable=False),
    sa.Column('discount', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('note', sa.VARCHAR(), nullable=True),
    sa.Column('status', sa.VARCHAR(), nullable=False),
    sa.Column('payment_method', sa.VARCHAR(), server_default='vnpay', nullable=False),
    sa.Column('transaction_no', sa.VARCHAR(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_variant',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('size', sa.VARCHAR(), nullable=True),
    sa.Column('color', sa.VARCHAR(), nullable=True),
    sa.Column('price', sa.INTEGER(), nullable=False),
    sa.Column('quantity', sa.INTEGER(), nullable=False),
    sa.Column('sku', sa.VARCHAR(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('product_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order_detail',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.INTEGER(), nullable=False),
    sa.Column('price', sa.INTEGER(), nullable=False),
    sa.Column('product_id', sa.Uuid(), nullable=False),
    sa.Column('product_variant_id', sa.Uuid(), nullable=False),
    sa.Column('order_id', sa.Uuid(), nullable=False),
    sa.Column('Product', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.ForeignKeyConstraint(['product_variant_id'], ['product_variant.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('evaluate',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('comment', sa.TEXT(), nullable=True),
    sa.Column('rate', sa.INTEGER(), nullable=False),
    sa.Column('images', sa.VARCHAR(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('product_id', sa.Uuid(), nullable=False),
    sa.Column('order_detail_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['order_detail_id'], ['order_detail.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('evaluate')
    op.drop_table('order_detail')
    op.drop_table('product_variant')
    op.drop_table('order')
    op.drop_table('categories_product')
    op.drop_table('address')
    op.drop_table('user')
    op.drop_table('special_offer')
    op.drop_table('product')
    op.drop_table('color')
    op.drop_table('categories')
    # ### end Alembic commands ###
